{
	"info": {
		"_postman_id": "2a3500fa-8ace-4270-afd3-ea38987b8af8",
		"name": "IBM Security Verify 20210708",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "OAuth 2.0 Flows (Acquire Token)",
			"item": [
				{
					"name": "Client Credentials (Privileged client)",
					"item": [
						{
							"name": "Get Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have access_token\", function() {",
											"   pm.response.to.have.jsonBody(\"access_token\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"access_token\", jsonData.access_token);",
											"   pm.environment.set(\"current_client_id\", pm.environment.get(\"client_id\"));",
											"   pm.environment.set(\"current_client_secret\", pm.environment.get(\"client_secret\"));",
											"});",
											"",
											"",
											"pm.test(\"expect access_token to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"access_token\")).to.exist; ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/token",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"endpoint",
										"default",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Flows (Application Client)",
					"item": [
						{
							"name": "ROPC Flow",
							"item": [
								{
									"name": "Request Token (ROPC Flow)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"expect response body to exist\", function() {",
													"   pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"expect response body to have access_token\", function() {",
													"   pm.response.to.have.jsonBody(\"access_token\");",
													"   let jsonData = JSON.parse(responseBody);",
													"   pm.environment.set(\"access_token\", jsonData.access_token);",
													"   pm.environment.set(\"current_client_id\", pm.environment.get(\"app_client_id\"));",
													"   pm.environment.set(\"current_client_secret\", pm.environment.get(\"app_client_secret\"));",
													"});",
													"",
													"pm.test(\"expect response body to have refresh_token\", function() {",
													"   pm.response.to.have.jsonBody(\"refresh_token\");",
													"   let jsonData = JSON.parse(responseBody);",
													"   pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{app_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{app_client_secret}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{test_password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/token",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"endpoint",
												"default",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Device Flow",
							"item": [
								{
									"name": "Initiate Device Flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"expect response body to exist\", function() {",
													"   pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"expect response body to have device_code\", function() {",
													"   pm.response.to.have.jsonBody(\"device_code\");",
													"   let jsonData = JSON.parse(responseBody);",
													"   pm.environment.set(\"device_code\", jsonData.device_code);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{app_client_id}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/device_authorization",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"endpoint",
												"default",
												"device_authorization"
											]
										}
									},
									"response": []
								},
								{
									"name": "Poll for Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"expect response body to exist\", function() {",
													"   pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"expect response body to have access_token\", function() {",
													"   pm.response.to.have.jsonBody(\"access_token\");",
													"   let jsonData = JSON.parse(responseBody);",
													"   pm.environment.set(\"access_token\", jsonData.access_token);",
													"   pm.environment.set(\"current_client_id\", pm.environment.get(\"app_client_id\"));",
													"   pm.environment.set(\"current_client_secret\", pm.environment.get(\"app_client_secret\"));",
													"   pm.environment.unset('device_code');",
													"});",
													"",
													"pm.test(\"expect response body to have refresh_token\", function() {",
													"   pm.response.to.have.jsonBody(\"refresh_token\");",
													"   let jsonData = JSON.parse(responseBody);",
													"   pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
													"   pm.environment.unset('device_code');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:device_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{app_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{app_client_secret}}",
													"type": "text"
												},
												{
													"key": "device_code",
													"value": "{{device_code}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/token",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"endpoint",
												"default",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "PolicyAuth Flow (Verify extension)",
							"item": [
								{
									"name": "Initiate PolicyAuth flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"expect response body to exist\", function() {",
													"   pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"expect response body to have access_token\", function() {",
													"   pm.response.to.have.jsonBody(\"access_token\");",
													"   let jsonData = JSON.parse(responseBody);",
													"   pm.environment.set(\"access_token\", jsonData.access_token);",
													"   pm.environment.set(\"current_client_id\", pm.environment.get(\"app_client_id\"));",
													"   pm.environment.set(\"current_client_secret\", pm.environment.get(\"app_client_secret\"));",
													"});",
													"",
													"",
													"pm.test(\"expect access_token to be set\", function () { ",
													"    pm.expect(pm.environment.get(\"access_token\")).to.exist; ",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "policyauth",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{app_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{app_client_secret}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/token",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"endpoint",
												"default",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "JWT Bearer Flow",
							"item": [
								{
									"name": "Request Token (JWT Bearer)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"expect response body to exist\", function() {",
													"   pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"expect response body to have access_token\", function() {",
													"   pm.response.to.have.jsonBody(\"access_token\");",
													"   let jsonData = JSON.parse(responseBody);",
													"   pm.environment.set(\"access_token\", jsonData.access_token);",
													"   pm.environment.set(\"current_client_id\", pm.environment.get(\"app_client_id\"));",
													"   pm.environment.set(\"current_client_secret\", pm.environment.get(\"app_client_secret\"));",
													"});",
													"",
													"",
													"pm.test(\"expect access_token to be set\", function () { ",
													"    pm.expect(pm.environment.get(\"access_token\")).to.exist; ",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{app_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{app_client_secret}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{interim_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/token",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"endpoint",
												"default",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Refresh Token Flow",
							"item": [
								{
									"name": "Request Token (Refresh Flow)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"expect response body to exist\", function() {",
													"   pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"expect response body to have access_token\", function() {",
													"   pm.response.to.have.jsonBody(\"access_token\");",
													"   let jsonData = JSON.parse(responseBody);",
													"   pm.environment.set(\"access_token\", jsonData.access_token);",
													"   pm.environment.set(\"current_client_id\", pm.environment.get(\"app_client_id\"));",
													"   pm.environment.set(\"current_client_secret\", pm.environment.get(\"app_client_secret\"));",
													"});",
													"",
													"pm.test(\"expect response body to have refresh_token\", function() {",
													"   pm.response.to.have.jsonBody(\"refresh_token\");",
													"   let jsonData = JSON.parse(responseBody);",
													"   pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "refresh_token",
													"value": "{{refresh_token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{app_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{app_client_secret}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/token",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"endpoint",
												"default",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Refresh Token",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{app_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{app_client_secret}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{refresh_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/revoke",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"endpoint",
												"default",
												"revoke"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Call UserInfo endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/userinfo",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"endpoint",
								"default",
								"userinfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Session using Access Token",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/auth/session?access_token={{access_token}}&redirect_url=%2Fivcreds%2F",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"auth",
								"session"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{access_token}}"
								},
								{
									"key": "redirect_url",
									"value": "%2Fivcreds%2F"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Introspect Access Token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{current_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{current_client_secret}}",
									"type": "text"
								},
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/introspect",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"endpoint",
								"default",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke Access Token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{current_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{current_client_secret}}",
									"type": "text"
								},
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/endpoint/default/revoke",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"endpoint",
								"default",
								"revoke"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Password Authentication",
			"item": [
				{
					"name": "Get all password-based ID sources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect password to have at least one member\", function() {",
									"   pm.expect(pm.response.json().password.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"identity_source\", jsonData.password[0].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/password",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get \"Cloud Directory\" identity source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect password to have at least one member\", function() {",
									"   pm.expect(pm.response.json().password.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"identity_source\", jsonData.password[0].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/password?search=name = \"Cloud Directory\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"password"
							],
							"query": [
								{
									"key": "search",
									"value": "name = \"Cloud Directory\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Password as First Factor (Returns JWT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect response body to contain id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect response body to contain assertion\", function() {",
									"   pm.response.to.have.jsonBody(\"assertion\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"interim_jwt\", jsonData.assertion);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{test_username}}\",\r\n    \"password\": \"{{test_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/password/{{identity_source}}?returnJwt=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"password",
								"{{identity_source}}"
							],
							"query": [
								{
									"key": "returnJwt",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect response body to contain id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect test_userid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"{{test_username}}\",\r\n  \"password\": \"{{test_password}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:ibm:core:2.0:AuthenticateUser\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/Users/authentication?returnUserRecord=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users",
								"authentication"
							],
							"query": [
								{
									"key": "returnUserRecord",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change My Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/scim+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"newPassword\": \"Passw0rd\",\r\n  \"currentPassword\": \"{{test_password}}\",\r\n  \"schemas\": [\r\n      \"urn:ietf:params:scim:schemas:ibm:core:2.0:ChangePassword\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/Me/password",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Me",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change My Password Back",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/scim+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"newPassword\": \"{{test_password}}\",\r\n  \"currentPassword\": \"Passw0rd\",\r\n  \"schemas\": [\r\n      \"urn:ietf:params:scim:schemas:ibm:core:2.0:ChangePassword\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/Me/password",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Me",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password (privileged action)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/scim+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Operations\": [\r\n    {\r\n      \"value\": {\r\n        \"password\": \"auto-generate\",\r\n        \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\": {\r\n          \"notifyType\": \"EMAIL\",\r\n          \"notifyPassword\": true,\r\n          \"notifyManager\": false\r\n        }\r\n      },\r\n      \"op\": \"replace\"\r\n    }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{test_userid}}/passwordResetter",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users",
								"{{test_userid}}",
								"passwordResetter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password Back (privileged action)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/scim+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"schemas\": [\r\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n    ],\r\n    \"Operations\": [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"password\",\r\n            \"value\": \"{{test_password}}\"\r\n        },\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:notifyType\",\r\n            \"value\": \"NONE\"\r\n        }\r\n    ]\r\n} "
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{test_userid}}?usershouldnotneedtoresetpassword=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users",
								"{{test_userid}}"
							],
							"query": [
								{
									"key": "usershouldnotneedtoresetpassword",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Factors Discovery",
			"item": [
				{
					"name": "#Get all enrollments by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstEmailotp",
									";",
									"",
									"pm.test(\"expect response body to have emailotp\", function() {",
									"   pm.response.to.have.jsonBody(\"emailotp\");",
									"});",
									"",
									"pm.test(\"expect emailotp to have at least one member\", function() {",
									"   pm.expect(pm.response.json().emailotp.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstEmailotp = jsonData.emailotp[0];",
									"});",
									"",
									"if (firstEmailotp !== undefined) {",
									"   pm.environment.set(\"emailotp_id\", firstEmailotp.id);",
									"}",
									"",
									"pm.test(\"expect emailotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors?search=userId=\"{{test_userid}}\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors"
							],
							"query": [
								{
									"key": "search",
									"value": "userId=\"{{test_userid}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Factors Discovery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/discover",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"discover"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Factors Discovery by type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/discover/signatures",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"discover",
								"signatures"
							]
						},
						"description": "Types: emailotp, smsotp, voiceotp, totp, signatures, fido2, qr"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Email OTP",
			"item": [
				{
					"name": "#Get Email OTP Configuration Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/config/v2.0/factors/emailotp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"config",
								"v2.0",
								"factors",
								"emailotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Set Email OTP Configuration Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"charset\": \"0123456789\",\n    \"enabled\": true,\n    \"expiry\": 300,\n    \"length\": 6,\n    \"retries\": 4\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/config/v2.0/factors/emailotp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"config",
								"v2.0",
								"factors",
								"emailotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all Email OTP enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/emailotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Email OTP enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"emailotp_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect emailotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\":\"{{test_userid}}\", \n  \"enabled\":true,\n  \"emailAddress\": \"{{test_email}}\"\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/emailotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Email enrollments by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstEmailotp",
									";",
									"",
									"pm.test(\"expect response body to have emailotp\", function() {",
									"   pm.response.to.have.jsonBody(\"emailotp\");",
									"});",
									"",
									"pm.test(\"expect emailotp to have at least one member\", function() {",
									"   pm.expect(pm.response.json().emailotp.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstEmailotp = jsonData.emailotp[0];",
									"});",
									"",
									"if (firstEmailotp !== undefined) {",
									"   pm.environment.set(\"emailotp_id\", firstEmailotp.id);",
									"}",
									"",
									"pm.test(\"expect emailotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/emailotp?search=userId=\"{{test_userid}}\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp"
							],
							"query": [
								{
									"key": "search",
									"value": "userId=\"{{test_userid}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Email OTP enrollment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/emailotp/{{emailotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp",
								"{{emailotp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new enrolled Email OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"email_txnid\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect email_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"email_txnid\")).to.exist; ",
									"});",
									"",
									"pm.variables.unset('correlation');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// build a correlation variable with random 4-digit value",
									"var numstr = \"\"+Math.floor(Math.random()*1000);",
									"var pad = \"0000\";",
									"var correlation = pad.substring(0, pad.length - numstr.length) + numstr;",
									"console.log(\"correlation: \" + correlation);",
									"pm.variables.set(\"correlation\", correlation);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"correlation\": \"{{correlation}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/emailotp/{{emailotp_id}}/verifications",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp",
								"{{emailotp_id}}",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new transient Email OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"email_txnid\", jsonData.id);",
									"   pm.environment.set(\"emailotp_id\", \"transient\");",
									"});",
									"",
									"pm.test(\"expect email_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"email_txnid\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"emailAddress\": \"{{test_email}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/emailotp/transient/verifications",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp",
								"transient",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify an Email OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"expect response body to contain assertion\", function() {",
									"   pm.response.to.have.jsonBody(\"assertion\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"interim_jwt\", jsonData.assertion);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otp\": \"134481\" \r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/emailotp/{{emailotp_id}}/verifications/{{email_txnid}}?returnJwt=true",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp",
								"{{emailotp_id}}",
								"verifications",
								"{{email_txnid}}"
							],
							"query": [
								{
									"key": "returnJwt",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Email OTP verification txn by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/emailotp/{{emailotp_id}}/verifications/{{email_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp",
								"{{emailotp_id}}",
								"verifications",
								"{{email_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an Email OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('email_txnid');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/emailotp/{{emailotp_id}}/verifications/{{email_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp",
								"{{emailotp_id}}",
								"verifications",
								"{{email_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete Email OTP enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('emailotp_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/emailotp/{{emailotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"emailotp",
								"{{emailotp_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SMS OTP",
			"item": [
				{
					"name": "#Get SMS OTP Configuration Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/config/v2.0/factors/smsotp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"config",
								"v2.0",
								"factors",
								"smsotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Set SMS OTP Configuration Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"charset\": \"0123456789\",\n    \"enabled\": true,\n    \"expiry\": 300,\n    \"length\": 6,\n    \"retries\": 4\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/config/v2.0/factors/smsotp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"config",
								"v2.0",
								"factors",
								"smsotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all SMS OTP enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/smsotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SMS OTP enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"smsotp_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect emailotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\":\"{{test_userid}}\", \n  \"enabled\":true,\n  \"phoneNumber\": \"{{test_phone}}\"\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/smsotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get SMS OTP enrollments by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstEmailotp",
									";",
									"",
									"pm.test(\"expect response body to have smsotp\", function() {",
									"   pm.response.to.have.jsonBody(\"smsotp\");",
									"});",
									"",
									"pm.test(\"expect smsotp to have at least one member\", function() {",
									"   pm.expect(pm.response.json().smsotp.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstSmsotp = jsonData.smsotp[0];",
									"});",
									"",
									"if (firstEmailotp !== undefined) {",
									"   pm.environment.set(\"smsotp_id\", firstSmsotp.id);",
									"}",
									"",
									"pm.test(\"expect smsotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"smsotp_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/smsotp?search=userId=\"{{test_userid}}\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp"
							],
							"query": [
								{
									"key": "search",
									"value": "userId=\"{{test_userid}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get SMS OTP enrollment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/smsotp/{{smsotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp",
								"{{smsotp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new enrolled SMS OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"sms_txnid\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect sms_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"sms_txnid\")).to.exist; ",
									"});",
									"",
									"pm.variables.unset('correlation');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// build a correlation variable with random 4-digit value",
									"var numstr = \"\"+Math.floor(Math.random()*1000);",
									"var pad = \"0000\";",
									"var correlation = pad.substring(0, pad.length - numstr.length) + numstr;",
									"console.log(\"correlation: \" + correlation);",
									"pm.variables.set(\"correlation\", correlation);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"correlation\": \"{{correlation}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/smsotp/{{smsotp_id}}/verifications",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp",
								"{{smsotp_id}}",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new transient SMS OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"sms_txnid\", jsonData.id);",
									"   pm.environment.set(\"smsotp_id\", \"transient\");",
									"});",
									"",
									"pm.test(\"expect sms_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"sms_txnid\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"phoneNumber\": \"{{test_phone}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/smsotp/transient/verifications",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp",
								"transient",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify an SMS OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"expect response body to contain assertion\", function() {",
									"   pm.response.to.have.jsonBody(\"assertion\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"interim_jwt\", jsonData.assertion);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otp\": \"501117\" \r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/smsotp/{{smsotp_id}}/verifications/{{sms_txnid}}?returnJwt=true",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp",
								"{{smsotp_id}}",
								"verifications",
								"{{sms_txnid}}"
							],
							"query": [
								{
									"key": "returnJwt",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get SMS OTP verification txn by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/smsotp/{{smsotp_id}}/verifications/{{sms_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp",
								"{{smsotp_id}}",
								"verifications",
								"{{sms_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an SMS OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('sms_txnid');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/smsotp/{{smsotp_id}}/verifications/{{sms_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp",
								"{{smsotp_id}}",
								"verifications",
								"{{sms_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete SMS OTP enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('smsotp_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/smsotp/{{smsotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"smsotp",
								"{{smsotp_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Voice OTP",
			"item": [
				{
					"name": "#Get Voice OTP Configuration Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/config/v2.0/factors/voiceotp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"config",
								"v2.0",
								"factors",
								"voiceotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Set Voice OTP Configuration Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"charset\": \"0123456789\",\n    \"enabled\": true,\n    \"expiry\": 300,\n    \"length\": 6,\n    \"retries\": 5\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/config/v2.0/factors/voiceotp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"config",
								"v2.0",
								"factors",
								"voiceotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all Voice OTP enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/voiceotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Voice OTP enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"voiceotp_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect voiceotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"voiceotp_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\":\"{{test_userid}}\", \n  \"enabled\":true,\n  \"phoneNumber\": \"{{test_phone}}\"\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/voiceotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Voice OTP enrollments by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstEmailotp",
									";",
									"",
									"pm.test(\"expect response body to have voiceotp\", function() {",
									"   pm.response.to.have.jsonBody(\"voiceotp\");",
									"});",
									"",
									"pm.test(\"expect voiceotp to have at least one member\", function() {",
									"   pm.expect(pm.response.json().voiceotp.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstVoiceotp = jsonData.voiceotp[0];",
									"});",
									"",
									"if (firstVoiceotp !== undefined) {",
									"   pm.environment.set(\"voiceotp_id\", firstVoiceotp.id);",
									"}",
									"",
									"pm.test(\"expect voiceotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"voiceotp_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/voiceotp?search=userId=\"{{test_userid}}\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp"
							],
							"query": [
								{
									"key": "search",
									"value": "userId=\"{{test_userid}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Voice OTP enrollment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/voiceotp/{{voiceotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp",
								"{{voiceotp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new enrolled Voice OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"voice_txnid\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect voice_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"voice_txnid\")).to.exist; ",
									"});",
									"",
									"pm.variables.unset('correlation');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// build a correlation variable with random 4-digit value",
									"var numstr = \"\"+Math.floor(Math.random()*1000);",
									"var pad = \"0000\";",
									"var correlation = pad.substring(0, pad.length - numstr.length) + numstr;",
									"console.log(\"correlation: \" + correlation);",
									"pm.variables.set(\"correlation\", correlation);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"correlation\": \"{{correlation}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/voiceotp/{{voiceotp_id}}/verifications",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp",
								"{{voiceotp_id}}",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new transient Voice OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"voice_txnid\", jsonData.id);",
									"   pm.environment.set(\"voiceotp_id\", \"transient\");",
									"});",
									"",
									"pm.test(\"expect voice_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"voice_txnid\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"phoneNumber\": \"{{test_phone}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/voiceotp/transient/verifications",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp",
								"transient",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify an Voice OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"expect response body to contain assertion\", function() {",
									"   pm.response.to.have.jsonBody(\"assertion\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"interim_jwt\", jsonData.assertion);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otp\": \"626088\" \r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/voiceotp/{{voiceotp_id}}/verifications/{{voice_txnid}}?returnJwt=true",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp",
								"{{voiceotp_id}}",
								"verifications",
								"{{voice_txnid}}"
							],
							"query": [
								{
									"key": "returnJwt",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Voice OTP verification txn by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/voiceotp/{{voiceotp_id}}/verifications/{{voice_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp",
								"{{voiceotp_id}}",
								"verifications",
								"{{voice_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an Voice OTP verification txn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('voice_txnid');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/voiceotp/{{voiceotp_id}}/verifications/{{voice_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp",
								"{{voiceotp_id}}",
								"verifications",
								"{{voice_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete Voice OTP enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('voiceotp_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/factors/voiceotp/{{voiceotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"voiceotp",
								"{{voiceotp_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "TOTP",
			"item": [
				{
					"name": "#Get TOTP Configuration Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/config/v2.0/factors/totp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"config",
								"v2.0",
								"factors",
								"totp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Set TOTP Configuration Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"algorithm\": \"SHA1\",\n    \"digits\": 6,\n    \"enabled\": true,\n    \"keyUri\": \"otpauth://totp/{{tenantid}}:@USER_NAME@?secret=@SECRET_KEY@&issuer={{tenantid}}%20TOTP&algorithm=@ALGORITHM@\",\n    \"oneTimeUse\": true,\n    \"period\": 30,\n    \"periodSkew\": 2\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/config/v2.0/factors/totp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"config",
								"v2.0",
								"factors",
								"totp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all TOTP enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/totp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"totp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Create TOTP enrollment - Return JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"totp_id\", jsonData.id);",
									"});",
									"",
									"",
									"pm.test(\"expect totp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"totp_id\")).to.exist; ",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{test_userid}}\",\n  \"enabled\": true,\n  \"accountName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/totp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"totp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Create TOTP enrollment - Return JSON+QR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"totp_id\", jsonData.id);",
									"});",
									"",
									"",
									"pm.test(\"expect totp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"totp_id\")).to.exist; ",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{test_userid}}\",\n  \"enabled\": true,\n  \"accountName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/totp?qrcodeInResponse=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"totp"
							],
							"query": [
								{
									"key": "qrcodeInResponse",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create TOTP enrollment - Return QR Code image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "image/png"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{test_userid}}\",\n  \"enabled\": true,\n  \"accountName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/totp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"totp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get TOTP enrollment by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have totp\", function() {",
									"   pm.response.to.have.jsonBody(\"totp\");",
									"    let jsonData = JSON.parse(responseBody);",
									"    if ( jsonData.totp.length > 0) {",
									"       postman.setEnvironmentVariable(\"totp_id\", jsonData.totp[0].id);",
									"    }",
									"});",
									"",
									"pm.test(\"expect totp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"totp_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/totp?search=userId=\"{{test_userid}}\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"totp"
							],
							"query": [
								{
									"key": "search",
									"value": "userId=\"{{test_userid}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get TOTP enrollment by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/totp/{{totp_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"totp",
								"{{totp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify TOTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"expect response body to contain assertion\", function() {",
									"   pm.response.to.have.jsonBody(\"assertion\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"interim_jwt\", jsonData.assertion);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"otp\":\"951259\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/totp/{{totp_id}}?returnJwt=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"totp",
								"{{totp_id}}"
							],
							"query": [
								{
									"key": "returnJwt",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete TOTP enrollment (/v1.0/authnapps/totp/{{totp_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('totp_id')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/totp/{{totp_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"totp",
								"{{totp_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Mobile PUSH (IBM Verify)",
			"item": [
				{
					"name": "Configuration",
					"item": [
						{
							"name": "#Get Signature Auth Method Config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signature",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authnmethods",
										"signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "#Set Signature Auth Method Config (to enable)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"face\": {\n        \"supportedAlgorithms\": [\n            \"RSASHA256\",\n            \"RSASHA512\"\n        ],\n        \"enabled\": true,\n        \"algorithm\": \"RSASHA256\"\n    },\n    \"userPresence\": {\n        \"supportedAlgorithms\": [\n            \"RSASHA256\"\n        ],\n        \"enabled\": true,\n        \"algorithm\": \"RSASHA256\"\n    },\n    \"fingerprint\": {\n        \"supportedAlgorithms\": [\n            \"RSASHA256\"\n        ],\n        \"enabled\": true,\n        \"algorithm\": \"RSASHA256\"\n    },\n    \"enabled\": true\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signature",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authnmethods",
										"signature"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authenticator Clients",
					"item": [
						{
							"name": "#Create new Authenticator Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have id\", function() {",
											"   pm.response.to.have.jsonBody(\"id\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"authclient_id\", jsonData.id);",
											"});",
											"",
											"",
											"pm.test(\"expect authclient_id to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"authclient_id\")).to.exist; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authorizationCodeLifetime\": 60,\n  \"enabled\": true,\n  \"name\": \"{{authclient_name}}\",\n  \"refreshTokenLifetime\": 31557600,\n  \"accessTokenLifetime\": 3600\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authenticators",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "#Get Authenticator Client by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have clients\", function() {",
											"   pm.response.to.have.jsonBody(\"clients\");",
											"});",
											"",
											"pm.test(\"expect clients to have at least one member\", function() {",
											"   pm.expect(pm.response.json().clients.length).to.be.above(0);",
											"    let jsonData = JSON.parse(responseBody);",
											"    pm.environment.set(\"authclient_id\", jsonData.clients[0].id);",
											"});",
											"",
											"pm.test(\"expect authclient_id to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"authclient_id\")).to.exist; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authenticators",
										"clients",
										"{{authclient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "#Get Authenticator Client by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have clients\", function() {",
											"   pm.response.to.have.jsonBody(\"clients\");",
											"});",
											"",
											"pm.test(\"expect clients to have at least one member\", function() {",
											"   pm.expect(pm.response.json().clients.length).to.be.above(0);",
											"    let jsonData = JSON.parse(responseBody);",
											"    pm.environment.set(\"authclient_id\", jsonData.clients[0].id);",
											"});",
											"",
											"pm.test(\"expect authclient_id to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"authclient_id\")).to.exist; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients?search=name=\"{{authclient_name}}\"",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authenticators",
										"clients"
									],
									"query": [
										{
											"key": "search",
											"value": "name=\"{{authclient_name}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "#Get Authenticator Client Metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}/metadata",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authenticators",
										"clients",
										"{{authclient_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "#Set Authenticator Client Metadata (set service name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serviceName\": \"{{tenantid}} Verify Demo\",\n    \"customAttributes\": {}\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}/metadata",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authenticators",
										"clients",
										"{{authclient_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "#Disable Authenticator Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json-patch+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": false, \"op\": \"replace\" }\n]"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authenticators",
										"clients",
										"{{authclient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "#Enable Authenticator Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json-patch+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": true, \"op\": \"replace\" }\n]"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authenticators",
										"clients",
										"{{authclient_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All Authenticator Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have clients\", function() {",
									"   pm.response.to.have.jsonBody(\"clients\");",
									"});",
									"",
									"pm.test(\"expect clients to have at least one member\", function() {",
									"   pm.expect(pm.response.json().clients.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"authclient_id\", jsonData.clients[0].id);",
									"});",
									"",
									"pm.test(\"expect authclient_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"authclient_id\")).to.exist; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get All Authenticators",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enroll an Authenticator (Return JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\": \"{{test_userid}}\",\n  \"clientId\": \"{{authclient_id}}\",\n  \"accountName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/initiation",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"initiation"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enroll an Authenticator (Return JSON+QR)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\": \"{{test_userid}}\",\n  \"clientId\": \"{{authclient_id}}\",\n  \"accountName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/initiation?qrcodeInResponse=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"initiation"
							],
							"query": [
								{
									"key": "qrcodeInResponse",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enroll an Authenticator (Return QR code image)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "image/png"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\": \"{{test_userid}}\",\n  \"clientId\": \"{{authclient_id}}\",\n  \"accountName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/initiation",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"initiation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Authenticators by Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have authenticators\", function() {",
									"   pm.response.to.have.jsonBody(\"authenticators\");",
									"});",
									"",
									"pm.test(\"expect authenticators to have at least one member\", function() {",
									"   pm.expect(pm.response.json().authenticators.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"auth_id\", jsonData.authenticators[0].id);",
									"});",
									"",
									"pm.test(\"expect auth_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"auth_id\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators?search=owner%20%3D%20%22{{test_userid}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators"
							],
							"query": [
								{
									"key": "search",
									"value": "owner%20%3D%20%22{{test_userid}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Authenticator by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Disable Authenticator",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": false, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enable Authenticator",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": true, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get All Signatures",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures"
							]
						}
					},
					"response": []
				},
				{
					"name": "CHOOSE: Get Signatures by Owner (Return 1st)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have signatures\", function() {",
									"   pm.response.to.have.jsonBody(\"signatures\");",
									"});",
									"",
									"pm.test(\"expect signatures to have at least one member\", function() {",
									"   pm.expect(pm.response.json().signatures.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"signature_id\", jsonData.signatures[0].id);",
									"    pm.environment.set(\"signature_subtype\", jsonData.signatures[0].subType);",
									"    pm.environment.set(\"auth_id\", jsonData.signatures[0].attributes.authenticatorId);",
									"});",
									"",
									"pm.test(\"expect signature_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect signature_subtype to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect auth_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"auth_id\")).to.exist; ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"signature_id\");",
									"pm.environment.unset(\"signature_subtype\");",
									"pm.environment.unset(\"auth_id\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures?search=owner%20%3D%20%22{{test_userid}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures"
							],
							"query": [
								{
									"key": "search",
									"value": "owner%20%3D%20%22{{test_userid}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CHOOSE: Get Signatures by Owner (Return 2nd)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have signatures\", function() {",
									"   pm.response.to.have.jsonBody(\"signatures\");",
									"});",
									"",
									"pm.test(\"expect signatures to have at least two members\", function() {",
									"   pm.expect(pm.response.json().signatures.length).to.be.above(1);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"signature_id\", jsonData.signatures[1].id);",
									"    pm.environment.set(\"signature_subtype\", jsonData.signatures[1].subType);",
									"    pm.environment.set(\"auth_id\", jsonData.signatures[1].attributes.authenticatorId);",
									"});",
									"",
									"pm.test(\"expect signature_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect signature_subtype to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect auth_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"auth_id\")).to.exist; ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"signature_id\");",
									"pm.environment.unset(\"signature_subtype\");",
									"pm.environment.unset(\"auth_id\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures?search=owner%20%3D%20%22{{test_userid}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures"
							],
							"query": [
								{
									"key": "search",
									"value": "owner%20%3D%20%22{{test_userid}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Signature by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect JSON response body.\", function() {",
									"   pm.response.to.have.jsonBody();",
									"   let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"signature_subtype\", jsonData.subType);",
									"    pm.environment.set(\"auth_id\", jsonData.attributes.authenticatorId);",
									"});",
									"",
									"pm.test(\"expect signature_subtype to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect auth_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"auth_id\")).to.exist; ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"signature_subtype\");",
									"pm.environment.unset(\"auth_id\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures/{{signature_id}}?_embedded=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures",
								"{{signature_id}}"
							],
							"query": [
								{
									"key": "_embedded",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Disable Signature",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": false, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures/{{signature_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures",
								"{{signature_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enable Signature",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": true, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures/{{signature_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures",
								"{{signature_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate a Verification Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"verification_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect verification_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"verification_id\")).to.exist; ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"expiresIn\": 120,\n  \"pushNotification\": {\n    \"sound\": \"default\",\n    \"message\": \"A new verification is waiting...\",\n    \"send\": true,\n    \"title\": \"{{tenantid}} Verify Demo\"\n  },\n  \"authenticationMethods\": [\n    {\n      \"methodType\": \"signature\",\n      \"id\": \"{{signature_id}}\"\n    }\n  ],\n  \"logic\": \"OR\",\n  \"transactionData\": {\n    \"additionalData\": [\n      {\n        \"name\": \"foo\",\n        \"value\": \"bar\"\n      }\n    ],\n    \"message\": \"Please verify using {{signature_subtype}}\",\n    \"originIpAddress\": \"192.168.42.42\",\n    \"originUserAgent\": \"POSTMAN\"\n  }\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}/verifications",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Verification Transaction by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}/verifications/{{verification_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}",
								"verifications",
								"{{verification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get All Verification Transactions for Authenticator",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "image/png",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}/verifications",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "#CLEANUP: Delete Signature",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('signature_id');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures/{{signature_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures",
								"{{signature_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#CLEANUP: Delete Authenticator",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('auth_id');",
									"    pm.environment.unset('signature_id');",
									"    pm.environment.unset('signature_subtype');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete Authenticator Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('authclient_id');",
									"    pm.environment.unset('auth_id');",
									"    pm.environment.unset('signature_id');",
									"    pm.environment.unset('signature_subtype');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients",
								"{{authclient_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "QR Code Login",
			"item": [
				{
					"name": "Get All Authenticator Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Authenticator Client by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have clients\", function() {",
									"   pm.response.to.have.jsonBody(\"clients\");",
									"});",
									"",
									"pm.test(\"expect clients to have at least one member\", function() {",
									"   pm.expect(pm.response.json().clients.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"authclient_id\", jsonData.clients[0].id);",
									"});",
									"",
									"pm.test(\"expect authclient_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"authclient_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients?search=name%20%3D%20%22{{authclient_name}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients"
							],
							"query": [
								{
									"key": "search",
									"value": "name%20%3D%20%22{{authclient_name}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate QR Code Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"qr_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect response body to have dsi\", function() {",
									"   pm.response.to.have.jsonBody(\"dsi\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"qr_dsi\", jsonData.dsi);",
									"});",
									"",
									"pm.test(\"expect response body to have lsi\", function() {",
									"   pm.response.to.have.jsonBody(\"lsi\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"qr_lsi\", jsonData.lsi);",
									"});",
									"",
									"pm.test(\"expect qr_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"qr_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect qr_dsi to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"qr_dsi\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect qr_lsi to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"qr_lsi\")).to.exist; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/qr/authenticate?profileId={{authclient_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"qr",
								"authenticate"
							],
							"query": [
								{
									"key": "profileId",
									"value": "{{authclient_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check status of QR Code Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have userId\", function() {",
									"   pm.response.to.have.jsonBody(\"userId\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.userId);",
									"   pm.environment.unset('qr_dsi');",
									"   pm.environment.unset('qr_lsi');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/qr/authenticate/{{qr_id}}?dsi={{qr_dsi}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"qr",
								"authenticate",
								"{{qr_id}}"
							],
							"query": [
								{
									"key": "dsi",
									"value": "{{qr_dsi}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by Id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "https://{{hostname}}/v2.0/Users/{{test_userid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users",
								"{{test_userid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete (incomplete) QR Code Login Verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('qr_dsi');",
									"    pm.environment.unset('qr_id');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/qr/{{qr_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"qr",
								"{{qr_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "FIDO2",
			"item": [
				{
					"name": "Resolve an RP ID from Origin URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have fido2\", function() {",
									"   pm.response.to.have.jsonBody(\"fido2\");",
									"});",
									"",
									"pm.test(\"expect fido2 to have at least one member\", function() {",
									"   pm.expect(pm.response.json().fido2.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    var firstFidoRp = jsonData.fido2[0];",
									"    pm.environment.set(\"fidorp_id\", firstFidoRp.id);",
									"});",
									"",
									"pm.test(\"expect fidorp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"fidorp_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"origin\": \"https://www.cifido2rp.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/fido2/relyingparties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"fido2",
								"relyingparties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate Registration",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\n  \"attestation\": \"none\",\n  \"userId\": \"{{test_userid}}\",\n  \"extensions\": {},\n  \"authenticatorSelection\": {\n    \"requireResidentKey\": true,\n    \"authenticatorAttachment\": \"cross-platform\",\n    \"userVerification\": \"preferred\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/fido2/relyingparties/{{fidorp_id}}/attestation/options",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"fido2",
								"relyingparties",
								"{{fidorp_id}}",
								"attestation",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate Authentication",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userVerification\": \"preferred\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/factors/fido2/relyingparties/{{fidorp_id}}/assertion/options",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"factors",
								"fido2",
								"relyingparties",
								"{{fidorp_id}}",
								"assertion",
								"options"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Identity Sources",
			"item": [
				{
					"name": "Get identity sources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect identitySources to have at least one member\", function() {",
									"   pm.expect(pm.response.json().identitySources.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set (\"identity_source\", jsonData.identitySources[0].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/identitysources",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"identitysources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get identity source by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect identitySources to have at least one member\", function() {",
									"   pm.expect(pm.response.json().identitySources.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"identity_source\", jsonData.identitySources[0].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/identitysources?search=instanceName = \"Cloud Directory\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"identitysources"
							],
							"query": [
								{
									"key": "search",
									"value": "instanceName = \"Cloud Directory\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get identity source by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/identitysources/{{identity_source}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"identitysources",
								"{{identity_source}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the ID sources for a username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect response to have at least one member\", function() {",
									"   pm.expect(pm.response.json().length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"identity_source\", jsonData[0].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n     \"user\":\"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1/mgmt/idaas/user/identitysources",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1",
								"mgmt",
								"idaas",
								"user",
								"identitysources"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Provisioning",
			"item": [
				{
					"name": "Users API",
					"item": [
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to be JSON\", function() {",
											"   pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"expect response body to contain id\", function() {",
											"   pm.response.to.have.jsonBody(\"id\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"test_userid\", jsonData.id);",
											"});",
											"",
											"pm.test(\"expect test_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n  ],\r\n  \"userName\": \"{{test_username}}\",\r\n  \"title\": \"End User\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\",\r\n    \"middleName\": \"Cloud\",\r\n    \"formatted\": \"{{test_firstname}} C {{test_surname}}\"\r\n  },\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"preferredLanguage\": \"en-US\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"addresses\": [\r\n    {\r\n      \"locality\": \"Austin\",\r\n      \"country\": \"US\",\r\n      \"type\": \"work\",\r\n      \"streetAddress\": \"11101 Burnet Rd. Austin, TX\",\r\n      \"postalCode\": \"78759\",\r\n      \"primary\": true,\r\n      \"region\": \"TX\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ],\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\": {\r\n    \"userCategory\": \"regular\",\r\n    \"twoFactorAuthentication\": false\r\n  },\r\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\r\n    \"department\": \"Test Users\",\r\n    \"employeeNumber\": \"012345\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by userName",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have totalResults\", function() {",
											"   pm.response.to.have.jsonBody(\"totalResults\"); ",
											"});",
											"",
											"pm.test(\"expect totalResults = 1\", function() {",
											"   pm.expect(pm.response.json().totalResults).to.equal(1);",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"test_userid\", jsonData.Resources[0].id);",
											"});",
											"",
											"pm.test(\"expect test_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users?filter=userName+eq+\"{{test_username}}\"",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "userName+eq+\"{{test_username}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by Id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users/{{test_userid}}",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user with /Me",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to be JSON\", function() {",
											"   pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"expect response body to contain id\", function() {",
											"   pm.response.to.have.jsonBody(\"id\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"test_userid\", jsonData.id);",
											"});",
											"",
											"pm.test(\"expect test_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Me",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user by user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n  ],\r\n  \"userName\": \"{{test_username}}\",\r\n  \"title\": \"End User\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\",\r\n    \"middleName\": \"Cloud\",\r\n    \"formatted\": \"{{test_firstname}} C {{test_surname}}\"\r\n  },\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"preferredLanguage\": \"en-US\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"addresses\": [\r\n    {\r\n      \"locality\": \"Austin\",\r\n      \"country\": \"US\",\r\n      \"type\": \"work\",\r\n      \"streetAddress\": \"11101 Burnet Rd. Austin, TX\",\r\n      \"postalCode\": \"78759\",\r\n      \"primary\": true,\r\n      \"region\": \"TX\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ],\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\": {\r\n    \"userCategory\": \"regular\",\r\n    \"twoFactorAuthentication\": false\r\n  },\r\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\r\n    \"department\": \"Test Users\",\r\n    \"employeeNumber\": \"012345\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users/{{test_userid}}",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch a user by userid - no notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Operations\": [\r\n        {\r\n           \t\"op\":\"replace\",\r\n           \t\"path\":\"emails[type eq \\\"work\\\"].value\",\r\n           \t\"value\": \"{{test_email}}\"\r\n        }\r\n    ],\r\n    \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\": {\r\n        \"notifyType\": \"NONE\",\r\n        \"notifyPassword\": false,\r\n        \"notifyManager\": false\r\n    },\r\n    \"schemas\": [\r\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n    ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{test_userid}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get employees of user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have totalResults\", function() {",
											"   pm.response.to.have.jsonBody(\"totalResults\"); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users?filter=urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager.value+sw+\"uid={{test_userid}}\"",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager.value+sw+\"uid={{test_userid}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users without an e-mail address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have totalResults\", function() {",
											"   pm.response.to.have.jsonBody(\"totalResults\"); ",
											"});",
											"",
											"pm.test(\"expect totalResults = 1\", function() {",
											"   pm.expect(pm.response.json().totalResults).to.equal(1);",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"test_userid\", jsonData.Resources[0].id);",
											"});",
											"",
											"pm.test(\"expect test_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users?filter=emails+npr",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "emails+npr"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"test_userid\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{test_userid}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PasswordReset API",
					"item": [
						{
							"name": "Reset using auto-generate",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"value\": {\r\n        \"password\": \"auto-generate\"\r\n      }\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users/{{test_userid}}/passwordResetter",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}",
										"passwordResetter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset with specified password and no notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"value\": {\r\n        \"password\": \"{{test_password}}\",\r\n        \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\": {\r\n          \"notifyType\": \"EMAIL\",\r\n          \"notifyPassword\": false\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users/{{test_userid}}/passwordResetter",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}",
										"passwordResetter"
									]
								}
							},
							"response": []
						}
					],
					"description": "Admin password reset operation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Attributes",
					"item": [
						{
							"name": "Get all attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/attributes",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom attribute (UI)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to be JSON\", function() {",
											"   pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"expect response body to contain id\", function() {",
											"   pm.response.to.have.jsonBody(\"id\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"customattr_id\", jsonData.id);",
											"});",
											"",
											"pm.test(\"expect customattr_id to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"customattr_id\")).to.exist; ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"args\": {\r\n    \"name\": \"demoAttribute\"\r\n  },\r\n  \"datatype\": \"string\",\r\n  \"name\": \"My Demo Attribute\",\r\n  \"schemaAttribute\": {\r\n    \"customAttribute\": true,\r\n    \"name\": \"customAttribute20\",\r\n    \"scimName\": \"demoAttribute\"\r\n  },\r\n  \"scope\": \"tenant\",\r\n  \"sourceType\": \"schema\",\r\n  \"tags\": [\"prov\", \"sso\"],\r\n  \"credName\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/attributes",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get attribute by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect at least one result\", function() {",
											"   pm.expect(pm.response.json().length).to.be.above(0);",
											"    let jsonData = JSON.parse(responseBody);",
											"    pm.environment.set(\"customattr_id\", jsonData[0].id);",
											"});",
											"",
											"pm.test(\"expect customattr_id to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"customattr_id\")).to.exist; ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/attributes?search=name  = \"My Demo Attribute\"",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"attributes"
									],
									"query": [
										{
											"key": "search",
											"value": "name  = \"My Demo Attribute\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with custom attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to be JSON\", function() {",
											"   pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"expect response body to contain id\", function() {",
											"   pm.response.to.have.jsonBody(\"id\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"custom_userid\", jsonData.id);",
											"});",
											"",
											"pm.test(\"expect custom_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"custom_userid\")).to.exist; ",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"custom_userid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n  ],\r\n  \"userName\": \"customAttrUser\",\r\n  \"title\": \"End User\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\",\r\n    \"middleName\": \"Custom\"\r\n  },\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"preferredLanguage\": \"en-US\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ],\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\": {\r\n    \"userCategory\": \"regular\",\r\n    \"twoFactorAuthentication\": false,\r\n    \"customAttributes\": [\r\n      {\r\n        \"name\": \"demoAttribute\",\r\n        \"values\": [\r\n          \"myDemoValue1\",\r\n\t\t  \"myDemoValue2\"\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\r\n    \"department\": \"CIV Test Users\",\r\n    \"employeeNumber\": \"012345\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "#Get user by custom attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have totalResults\", function() {",
											"   pm.response.to.have.jsonBody(\"totalResults\"); ",
											"});",
											"",
											"pm.test(\"expect totalResults = 1\", function() {",
											"   pm.expect(pm.response.json().totalResults).to.equal(1);",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"custom_userid\", jsonData.Resources[0].id);",
											"});",
											"",
											"pm.test(\"expect custom_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"custom_userid\")).to.exist; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users?filter=urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.demoAttribute eq \"myDemoValue1\"",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.demoAttribute eq \"myDemoValue1\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "#Get user by userName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have totalResults\", function() {",
											"   pm.response.to.have.jsonBody(\"totalResults\"); ",
											"});",
											"",
											"pm.test(\"expect totalResults = 1\", function() {",
											"   pm.expect(pm.response.json().totalResults).to.equal(1);",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"custom_userid\", jsonData.Resources[0].id);",
											"});",
											"",
											"pm.test(\"expect custom_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"custom_userid\")).to.exist; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users?filter=userName+eq+\"customAttrUser\"",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "userName+eq+\"customAttrUser\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "#Get user - only return a custom attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have totalResults\", function() {",
											"   pm.response.to.have.jsonBody(\"totalResults\"); ",
											"});",
											"",
											"pm.test(\"expect totalResults = 1\", function() {",
											"   pm.expect(pm.response.json().totalResults).to.equal(1);",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"custom_userid\", jsonData.Resources[0].id);",
											"});",
											"",
											"pm.test(\"expect custom_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"custom_userid\")).to.exist; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users?filter=userName eq \"customAttrUser\"&attributes=urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.demoAttribute",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "userName eq \"customAttrUser\""
										},
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.demoAttribute"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with custom attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n  ],\r\n  \"userName\": \"customAttrUser\",\r\n  \"title\": \"End User\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\",\r\n    \"middleName\": \"Custom\"\r\n  },\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"preferredLanguage\": \"en-US\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ],\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\": {\r\n    \"userCategory\": \"regular\",\r\n    \"twoFactorAuthentication\": false,\r\n    \"customAttributes\": [\r\n      {\r\n        \"name\": \"demoAttribute\",\r\n        \"values\": [\r\n          \"myDemoValue3\"\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\r\n    \"department\": \"CIV Test Users\",\r\n    \"employeeNumber\": \"012345\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{custom_userid}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{custom_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch a user with custom attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"Operations\": [\r\n            {\r\n            \t\"op\":\"add\",\r\n            \t\"path\":\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes\",\r\n            \t\"value\": [{\"name\": \"demoAttribute\",\"values\":[\"PatchedValue1\"]}]\r\n            }\r\n     ],\r\n        \"schemas\": [\r\n          \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n     ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{custom_userid}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{custom_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user with custom attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"custom_userid\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{custom_userid}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{custom_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"customattr_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/attributes/{{customattr_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"attributes",
										"{{customattr_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Schema Attributes",
					"item": [
						{
							"name": "Get all schema attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get schema attributes paging",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes?count=10&startIndex=1&sortBy=scimName",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									],
									"query": [
										{
											"key": "count",
											"value": "10"
										},
										{
											"key": "startIndex",
											"value": "1"
										},
										{
											"key": "sortBy",
											"value": "scimName"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all default schema attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes?filter=default",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									],
									"query": [
										{
											"key": "filter",
											"value": "default"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all custom schema attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes?filter=custom",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									],
									"query": [
										{
											"key": "filter",
											"value": "custom"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Attribute available count",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes?filter=customAvailable",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									],
									"query": [
										{
											"key": "filter",
											"value": "customAvailable"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom schema attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttribute\"\r\n  ],\r\n  \"name\": \"customAttribute20\",\r\n  \"description\": \"A custom attribute for demonstration purposes.\",\r\n  \"displayName\": \"Demo Attribute\",\r\n  \"type\": \"string\",\r\n  \"scimName\": \"demoAttribute\",\r\n  \"multiValue\": false\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									]
								},
								"description": "You should create attributes using the /v1.0/attributes API instead of using this API."
							},
							"response": []
						},
						{
							"name": "Update custom attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttribute\"\r\n  ],\r\n  \"name\": \"customAttribute20\",\r\n  \"description\": \"An updated description for a demonstration custom attribute\",\r\n  \"displayName\": \"Updated Display Name\",\r\n  \"type\": \"string\",\r\n  \"scimName\": \"demoAttribute\",\r\n  \"multiValue\": true\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes/customAttribute20",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes",
										"customAttribute20"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get schema attribute by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes/customAttribute20",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes",
										"customAttribute20"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom schema attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes/customAttribute20",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes",
										"customAttribute20"
									]
								}
							},
							"response": []
						}
					],
					"description": "Adds a custom attribute called nickNames which is multivale",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Groups API",
					"item": [
						{
							"name": "Create group",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseBody !== null){",
											"    if (responseBody.has(\"displayName\")) {",
											"        var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"group_id\", jsonData.id);",
											"    }",
											"}",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"testGroup\",\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\": {\r\n    \"description\": \"This is a test group\"\r\n  },\r\n  \"members\": [\r\n    {\r\n      \"type\": \"user\",\r\n      \"value\": \"{{test_userid}}\"\r\n    }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\"\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove all Users from Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"testGroup\",\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\": {\r\n    \"description\": \"This is a test group\"\r\n  },\r\n  \"members\": [],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups/{{group_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Users for Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"testGroup\",\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\": {\r\n    \"description\": \"This is a test group\"\r\n  },\r\n  \"members\": [\r\n   {\r\n    \"type\": \"user\",\r\n    \"value\": \"{{test_userid}}\"\r\n   }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups/{{group_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all groups",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/scim+json"
									}
								],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"group_id\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups/{{group_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Bulk API",
					"item": [
						{
							"name": "Create user, create group and add user to group in single request",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseBody !== null){",
											"    if (responseBody.has(\"location\")) {",
											"        var jsonData = JSON.parse(responseBody);",
											"        var userOperation = jsonData.Operations[0];",
											"        postman.setEnvironmentVariable(\"bulk_userid\", userOperation.location.substring(userOperation.location.lastIndexOf(\"/\") + 1));",
											"        var groupOperation = jsonData.Operations[1];",
											"        postman.setEnvironmentVariable(\"bulk_groupid\", groupOperation.location.substring(groupOperation.location.lastIndexOf(\"/\") + 1));",
											"    }",
											"}",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\r\n    \"Operations\":[ \r\n\t   { \r\n\t      \"method\":\"POST\", \r\n\t      \"bulkId\":\"qwerty0\", \r\n\t      \"path\":\"/Users\", \r\n\t      \"data\":{ \r\n\t           \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"], \r\n\t           \"userName\":\"bulkuser\", \r\n\t           \"emails\":[{ \"type\":\"work\", \"value\":\"{{test_email}}\" }] \r\n\t       } \r\n\t   }, \r\n\t   { \r\n\t       \"method\":\"POST\", \r\n\t       \"path\":\"/Groups\", \r\n\t       \"bulkId\":\"qwerty2\", \r\n\t       \"data\": { \r\n\t           \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:Group\"], \r\n\t           \"displayName\":\"bulkgroup\", \r\n\t           \"members\":[ {\"type\":\"user\", \"value\":\"bulkId:qwerty0\"} ] \r\n\t        }\r\n\t   }\r\n   ]\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Bulk",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Bulk"
									]
								},
								"description": "Creates a user\nCreate a group and add user as a member\n\nCreate enviroment vars\n  bulk.user_id\n  bulk.group_id"
							},
							"response": []
						},
						{
							"name": "Get group by Id (/v2.0/Groups/{{bulk.group_id}})",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Groups/{{bulk_groupid}}",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups",
										"{{bulk_groupid}}"
									]
								},
								"description": "Shows the group and user member created by bulk operation"
							},
							"response": []
						},
						{
							"name": "Delete user and group in single request",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.unset(\"bulk_userid\");",
											"    pm.environment.unset(\"bulk_groupid\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\r\n    \"Operations\":[ \r\n\t   { \r\n\t      \"method\":\"DELETE\", \r\n\t      \"path\":\"/Users/{{bulk_userid}}\"\r\n\r\n\t   }, \r\n\t   { \r\n\t       \"method\":\"DELETE\", \r\n\t       \"path\":\"/Groups/{{bulk_groupid}}\"\r\n\t   }\r\n   ]\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Bulk",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Bulk"
									]
								},
								"description": "Cleans up the user and group created by the bulk operation"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "CSV Import",
					"item": [
						{
							"name": "Get CSV Headers (Users)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/CSV/headerNames?filter=user",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"CSV",
										"headerNames"
									],
									"query": [
										{
											"key": "filter",
											"value": "user"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CSV Headers (Groups)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/CSV/headerNames?filter=group",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"CSV",
										"headerNames"
									],
									"query": [
										{
											"key": "filter",
											"value": "group"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV (embedded)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 202\", function() {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have _id\", function() {",
											"   pm.response.to.have.jsonBody(\"_id\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"csv_job_id\", jsonData._id);",
											"});",
											"",
											"pm.test(\"expect csv_job_id to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"csv_job_id\")).to.exist; ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "usershouldnotneedtoresetpassword",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "preferred_username,given_name,family_name,email,password\ncsvuser,CSV,User,{{test_email}},{{test_password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/CSV/importUsers?notifyType=NONE",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"CSV",
										"importUsers"
									],
									"query": [
										{
											"key": "notifyType",
											"value": "NONE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV (file)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 202\", function() {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have _id\", function() {",
											"   pm.response.to.have.jsonBody(\"_id\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"csv_job_id\", jsonData._id);",
											"});",
											"",
											"pm.test(\"expect csv_job_id to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"csv_job_id\")).to.exist; ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "usershouldnotneedtoresetpassword",
										"value": "true",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/Users/jonharry/Desktop/test.csv"
										}
									]
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/CSV/importUsers",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"CSV",
										"importUsers"
									],
									"query": [
										{
											"key": "notifyType",
											"value": "NONE",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List CSV jobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 202\", function() {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have jobs\", function() {",
											"   pm.response.to.have.jsonBody(\"jobs\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   if (jsonData.jobs[0]._id) {",
											"       pm.environment.set(\"csv_job_id\", jsonData.jobs[0]._id);",
											"   }",
											"});",
											"",
											"pm.test(\"expect csv_job_id to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"csv_job_id\")).to.exist; ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/CSV/jobs",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"CSV",
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CSV job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData;",
											"",
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to have state\", function() {",
											"   pm.response.to.have.jsonBody(\"state\");",
											"   jsonData = JSON.parse(responseBody);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/CSV/jobs/{{csv_job_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"CSV",
										"jobs",
										"{{csv_job_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel CSV job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/CSV/jobs/{{csv_job_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"CSV",
										"jobs",
										"{{csv_job_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CSV job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"csv_job_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/CSV/jobs/{{csv_job_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"CSV",
										"jobs",
										"{{csv_job_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CSV User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have totalResults\", function() {",
											"   pm.response.to.have.jsonBody(\"totalResults\"); ",
											"});",
											"",
											"pm.test(\"expect totalResults = 1\", function() {",
											"   pm.expect(pm.response.json().totalResults).to.equal(1);",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"csv_userid\", jsonData.Resources[0].id);",
											"});",
											"",
											"pm.test(\"expect test_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"csv_userid\")).to.exist; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users?filter=userName+eq+\"csvuser\"",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "userName+eq+\"csvuser\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CSV User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"csv_userid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{csv_userid}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{csv_userid}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Grant Management",
			"item": [
				{
					"name": "Get ALL Grants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/grants",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"grants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Grants for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/usergrants",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"usergrants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Grants for App (that user owns)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/appgrants",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"appgrants"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Consent Management",
			"item": [
				{
					"name": "Get ALL Consents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/consents",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Consents for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/userconsents",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"userconsents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Consents for App (that user owns)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/appconsents",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"appconsents"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DPCM",
			"item": [
				{
					"name": "Data-Subject-Presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect response body to have purposes\", function() {",
									"    let purposeId = pm.environment.get(\"purposeId\");",
									"    let responseJson = pm.response.json();",
									"    pm.expect(responseJson.purposes[purposeId]).to.exist;",
									"    let jsonData = JSON.parse(responseBody);",
									"    if ( jsonData.purposes[purposeId].attributes[0]) {",
									"       pm.environment.set(\"attributeId\", jsonData.purposes[purposeId].attributes[0].id);",
									"        pm.environment.set(\"accessTypeId\", jsonData.purposes[purposeId].attributes[0].accessTypes[0].id);",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"purposeId\": [\n        \"{{purposeId}}\"\n    ],\n    \"subjectId\": \"{{test_userid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/dpcm/v1.0/privacy/data-subject-presentation",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"dpcm",
								"v1.0",
								"privacy",
								"data-subject-presentation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Data-Usage-Approval",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"items\": [\n    {\n      \"purposeId\": \"{{purposeId}}\",\n      \"accessTypeId\": \"{{accessTypeId}}\",\n      \"attributeId\": \"{{attributeId}}\"\n    }\n  ],\n  \"subjectId\": \"{{test_userid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/dpcm/v1.0/privacy/data-usage-approval",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"dpcm",
								"v1.0",
								"privacy",
								"data-usage-approval"
							]
						}
					},
					"response": []
				},
				{
					"name": "Record Opt-In Consent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"purposeId\": \"{{purposeId}}\",\n    \"accessTypeId\": \"{{accessTypeId}}\",\n    \"attributeId\": \"{{attributeId}}\",\n    \"state\": 3,\n    \"subjectId\": \"{{test_userid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/dpcm/v1.0/privacy/consents",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"dpcm",
								"v1.0",
								"privacy",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Record Opt-out using multiple updates format",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"path\": \"\",\n    \"value\": {\n        \"purposeId\": \"{{purposeId}}\",\n        \"accessTypeId\": \"{{accessTypeId}}\",\n        \"attributeId\": \"{{attributeId}}\",\n        \"state\": 4,\n        \"subjectId\": \"{{test_userid}}\"\n    },\n    \"op\": \"add\"\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/dpcm/v1.0/privacy/consents",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"dpcm",
								"v1.0",
								"privacy",
								"consents"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Applications (and Clients)",
			"item": [
				{
					"name": "Create Dynamic Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GrabAccessToken\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.registration_access_token) {",
									"        pm.environment.set(\"api_access_token\", jsonData.registration_access_token);",
									"    }",
									"    if (jsonData.client_id) {",
									"        pm.environment.set(\"app_client_id\", jsonData.client_id);",
									"    }",
									"    if (jsonData.client_secret) {",
									"        pm.environment.set(\"app_client_secret\", jsonData.client_secret);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"redirect_uris\":[\"https://localhost:3000/oauth/callback\"],\n\t\"client_name\":\"FeatureReview-1\",\n\t\"all_users_entitled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/client_registration",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"client_registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have _embedded.applications\", function() {",
									"   pm.response.to.have.jsonBody(\"_embedded.applications\");",
									"});",
									"",
									"var firstApp;",
									"",
									"pm.test(\"expect applications to have at least one member\", function() {",
									"   pm.expect(pm.response.json()._embedded.applications.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstApp = jsonData._embedded.applications[0];",
									"});",
									"",
									"if (firstApp !== undefined) {",
									"   let firstAppId = firstApp._links.self.href;",
									"   pm.environment.set(\"application_id\", firstAppId.substring(firstAppId.lastIndexOf('/')+1));",
									"}",
									"",
									"pm.test(\"expect application_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"application_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/applications",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application List with Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have _embedded.applications\", function() {",
									"   pm.response.to.have.jsonBody(\"_embedded.applications\");",
									"});",
									"",
									"var firstApp;",
									"",
									"pm.test(\"expect applications to have at least one member\", function() {",
									"   pm.expect(pm.response.json()._embedded.applications.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstApp = jsonData._embedded.applications[0];",
									"});",
									"",
									"if (firstApp !== undefined) {",
									"   let firstAppId = firstApp._links.self.href;",
									"   pm.environment.set(\"application_id\", firstAppId.substring(firstAppId.lastIndexOf('/')+1));",
									"}",
									"",
									"pm.test(\"expect application_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"application_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/applications?sort=+name&limit=50&page=1&search=name=\"Office 365\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"applications"
							],
							"query": [
								{
									"key": "sort",
									"value": "+name"
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "search",
									"value": "name=\"Office 365\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application List for user ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have _embedded.applications\", function() {",
									"   pm.response.to.have.jsonBody(\"_embedded.applications\");",
									"});",
									"",
									"var firstApp;",
									"",
									"pm.test(\"expect applications to have at least one member\", function() {",
									"   pm.expect(pm.response.json()._embedded.applications.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstApp = jsonData._embedded.applications[0];",
									"});",
									"",
									"if (firstApp !== undefined) {",
									"   let firstAppId = firstApp._links.self.href;",
									"   pm.environment.set(\"application_id\", firstAppId.substring(firstAppId.lastIndexOf('/')+1));",
									"}",
									"",
									"pm.test(\"expect application_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"application_id\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/applications?requestorid={{test_userid}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"applications"
							],
							"query": [
								{
									"key": "requestorid",
									"value": "{{test_userid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application by application ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/applications/{{application_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application entitlements by application ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/owner/applications/{{application_id}}/entitlements",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"owner",
								"applications",
								"{{application_id}}",
								"entitlements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application info for owner by application ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/owner/applications/{{application_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"owner",
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Events, Reports, Stats",
			"item": [
				{
					"name": "Get Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"if (jsonData.response.events.search_after.time) {\r",
									"  postman.setEnvironmentVariable(\"after_time\", jsonData.response.events.search_after.time);\r",
									"}\r",
									"if (jsonData.response.events.search_after.id) {\r",
									"postman.setEnvironmentVariable(\"after_id\", jsonData.response.events.search_after.id);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/events?from=1563546304000",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"events"
							],
							"query": [
								{
									"key": "event_type",
									"value": "\\\"sso\\\"",
									"disabled": true
								},
								{
									"key": "to",
									"value": "1563229793000",
									"disabled": true
								},
								{
									"key": "size",
									"value": "5",
									"disabled": true
								},
								{
									"key": "from",
									"value": "1563546304000",
									"description": "From {{timestamp}} to today's current epoch"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get reports (authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"FROM\":\"now-24h\", \"TO\":\"now\", \"SIZE\":\"10\", \"SORT_BY\":\"time\", \"SORT_ORDER\":\"asc\" }"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/reports/auth_audit_trail",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"reports",
								"auth_audit_trail"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events, Next",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"if (jsonData.response.events.search_after.time) {",
									"  postman.setEnvironmentVariable(\"after_time\", jsonData.response.events.search_after.time);",
									"}",
									"if (jsonData.response.events.search_after.id) {",
									"postman.setEnvironmentVariable(\"after_id\", jsonData.response.events.search_after.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/events?after=\\\"{{after_time}}\\\",\\\"{{after_id}}\\\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"events"
							],
							"query": [
								{
									"key": "after",
									"value": "\\\"{{after_time}}\\\",\\\"{{after_id}}\\\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ALL Events, Next",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"if (jsonData.response.events.search_after.time) {",
									"  postman.setEnvironmentVariable(\"after_time\", jsonData.response.events.search_after.time);",
									"}",
									"if (jsonData.response.events.search_after.id) {",
									"postman.setEnvironmentVariable(\"after_id\", jsonData.response.events.search_after.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/events?all_events=yes&after=\\\"{{after_time}}\\\",\\\"{{after_id}}\\\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"events"
							],
							"query": [
								{
									"key": "all_events",
									"value": "yes"
								},
								{
									"key": "after",
									"value": "\\\"{{after_time}}\\\",\\\"{{after_id}}\\\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application Stats",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{scheme}}://{{hostname}}/appaccess/v1.0/applications/stats",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"appaccess",
								"v1.0",
								"applications",
								"stats"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Configuration",
			"item": [
				{
					"name": "Branding Customization",
					"item": [
						{
							"name": "Themes",
							"item": [
								{
									"name": "Download Master theme templates (out of the box)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/branding/themes/master",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"themes",
												"master"
											]
										},
										"description": "Out of the box templates."
									},
									"response": []
								},
								{
									"name": "Download Default theme templates (current tenant customizations)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/branding/themes/default",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"themes",
												"default"
											]
										},
										"description": "It downloads only the customized templates. If no customizations are present, it downloads all out-of-the box templates."
									},
									"response": []
								},
								{
									"name": "Query all existing themes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"expect response body to exist\", function() {",
													"   pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"expect response body to be JSON\", function() {",
													"   pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"expect themeRegistrations to have at least one member\", function() {",
													"   pm.expect(pm.response.json().themeRegistrations.length).to.be.above(0);",
													"    let jsonData = JSON.parse(responseBody);",
													"    pm.environment.set(\"theme_id\", jsonData.themeRegistrations[0].id);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{hostname}}/v1.0/branding/themes",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"themes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Download theme by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "https://{{hostname}}/v1.0/branding/themes/{{theme_id}}",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"themes",
												"{{theme_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a new custom Theme and upload templates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"extractThemeID\", function () {",
													"    pm.response.to.have.status(201);",
													"    var loc = pm.response.headers.get(\"Location\")",
													"    if (loc) {",
													"        var tokens = loc.split(\"/\");",
													"        pm.environment.set(\"theme_id\", tokens[tokens.length - 1]);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": []
												},
												{
													"key": "configuration",
													"value": "{\"name\": \"ThemeTest\", \"description\":\"Description for ThemeTest\"}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{hostname}}/v1.0/branding/themes",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"themes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a Custom theme",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": []
												},
												{
													"key": "configuration",
													"value": "{\"name\": \"ThemeTest\", \"description\":\"Description for ThemeTest\"}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{hostname}}/v1.0/branding/themes/{{theme_id}}",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"themes",
												"{{theme_id}}"
											]
										},
										"description": "Obtain theme Id by running \"Query all existing themes\"."
									},
									"response": []
								},
								{
									"name": "Delete a Custom theme",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/branding/themes/{{theme_id}}",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"themes",
												"{{theme_id}}"
											]
										},
										"description": "Obtain theme Id by running \"Query all existing themes\"."
									},
									"response": []
								},
								{
									"name": "Get Application by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"expect response body to exist\", function() {",
													"   pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"expect response body to be JSON\", function() {",
													"   pm.response.to.be.json;",
													"   pm.environment.set(\"app_data\", responseBody);",
													"});",
													"",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/applications/{{application_id}}",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"applications",
												"{{application_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify an application and assign theme",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var appdata = JSON.parse(pm.environment.get(\"app_data\"));",
													"var themeid = pm.environment.get(\"theme_id\");",
													"appdata.customization = {",
													"        themeId: themeid",
													"    }",
													"delete appdata.xforce",
													"delete appdata._links",
													"delete appdata.icon",
													"delete appdata.type",
													"pm.variables.set(\"updated_app_data\", JSON.stringify(appdata));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{updated_app_data}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/applications/{{application_id}}",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"applications",
												"{{application_id}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Themes management API",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Templates (Old)",
							"item": [
								{
									"name": "#Get Default Template Pages ZIP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/branding/download?customized=false",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"download"
											],
											"query": [
												{
													"key": "customized",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "#Get Current Template Pages ZIP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/branding/download",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"download"
											]
										}
									},
									"response": []
								},
								{
									"name": "#Upload Template Pages ZIP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "formData",
													"value": "",
													"type": "file"
												}
											]
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/branding/upload",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "#Reset branding to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"expect status code to be 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/branding/reset",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"branding",
												"reset"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Manage Policies",
					"item": [
						{
							"name": "Get policies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/policyvault/accesspolicy/",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"policyvault",
										"accesspolicy",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"2FA Policy for Demo.  Added via API\",\n  \"format\": \"json\",\n  \"name\": \"Demo2FAPolicy\",\n  \"rules\": [{\n    \"alwaysRun\": false,\n    \"conditions\": {\n      \"subjectAttributes\": {\n        \"attributes\": [{\n          \"name\": \"groupIds\",\n          \"opCode\": \"EQ\",\n          \"values\": [\"MFAGroup\"]\n        }]\n      }\n    },\n    \"id\": \"1575996852499\",\n    \"name\": \"2FA for MFAGroup\",\n    \"result\": {\n      \"action\": {\n        \"allowAccess\": false,\n        \"factorFrequency\": \"ALWAYS\",\n        \"requireFactor\": true\n      },\n      \"authnMethods\": [\"urn:ibm:security:authentication:asf:macotp\"],\n      \"serverSideActions\": []\n    }\n  }, {\n    \"alwaysRun\": false,\n    \"conditions\": {},\n    \"id\": \"1575995716689\",\n    \"name\": \"Default rule\",\n    \"result\": {\n      \"action\": {\n        \"allowAccess\": true,\n        \"requireFactor\": false\n      },\n      \"authnMethods\": [\"urn:ibm:security:authentication:asf:macotp\"],\n      \"serverSideActions\": []\n    }\n  }],\n  \"schemaVersion\": \"urn:access:policy:3.0:schema\"\n}\n"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/policyvault/accesspolicy",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"policyvault",
										"accesspolicy"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Manage Entitlements",
					"item": [
						{
							"name": "Get AccessToken (/v1.0/endpoint/default/token)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}:{{port}}/v1.0/endpoint/default/token",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"v1.0",
										"endpoint",
										"default",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all self admin entitlements",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v1.0/self/admin/entitlements",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"self",
										"admin",
										"entitlements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an admin entitlement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"role_id\", jsonData.code);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Authorization",
										"name": "Content-Type",
										"type": "text",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Enhanced app owner\",\n  \"description\": \"This is a role that supports app owner but can edit the app settings that they own\",\n  \"type\": \"ROLE\"\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v1.0/admin/entitlements",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"admin",
										"entitlements"
									]
								},
								"description": "Output will be the UUID of the new object created (called \"code\")"
							},
							"response": []
						},
						{
							"name": "Add children permissions to role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Authorization",
										"name": "Content-Type",
										"type": "text",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"add\": [\n    {\n\t   \"code\": \"applicationowners\"\n    },\n    {\n\t   \"code\": \"manageappaccessadmin\"\n    },\n    {\n\t   \"code\": \"readappconfig\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v1.0/admin/entitlements/{{role_id}}/children",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"admin",
										"entitlements",
										"{{role_id}}",
										"children"
									]
								},
								"description": "Output will be the UUID of the new object created (called \"code\")"
							},
							"response": []
						},
						{
							"name": "Modify children permissions to role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Authorization",
										"name": "Content-Type",
										"type": "text",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"add\": [\n    {\n\t   \"code\": \"applicationowners\"\n    },\n    {\n\t   \"code\": \"manageappaccessadmin\"\n    },\n    {\n\t   \"code\": \"readappconfig\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v1.0/admin/entitlements/{{role_id}}/children",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"admin",
										"entitlements",
										"{{role_id}}",
										"children"
									]
								},
								"description": "Output will be the UUID of the new object created (called \"code\")"
							},
							"response": []
						},
						{
							"name": "Get user by userName (/v2.0/Users)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseBody !== null){",
											"    var jsonData = JSON.parse(responseBody);",
											"    if (jsonData[\"totalResults\"] == 1) {",
											"        postman.setEnvironmentVariable(\"user_id\", jsonData.Resources[0].id);",
											"        postman.setEnvironmentVariable(\"user_name\", jsonData.Resources[0].userName);",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users?filter=userName+st+\"jshmoe\"",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "userName+st+\"jshmoe\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign role to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"role_id\", jsonData.code);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Authorization",
										"name": "Content-Type",
										"type": "text",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant\": [\n    {\n      \"entitlement\": \"{{role_id}}\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v1.0/admin/entitlements/user/{{user_id}}",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"admin",
										"entitlements",
										"user",
										"{{user_id}}"
									]
								},
								"description": "Output will be the UUID of the new object created (called \"code\")"
							},
							"response": []
						},
						{
							"name": "Add entitlement to group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"name": "Content-Type",
										"type": "text",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant\": [\n    {\n      \"brt\": false,\n      \"entitlement\": \"315aafee-5403-4653-af82-f5240ad491a4\",\n      \"rights\": [\n        {\n          \"values\": [\n            \"readusergroups\"\n          ],\n          \"entitlement\": \"315aafee-5403-4653-af82-f5240ad491a4\"\n        }\n      ]\n    }\n  ]\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v1.0/admin/entitlements/group/{{group_id}} ",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"admin",
										"entitlements",
										"group",
										"{{group_id}} "
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all entitlements for a group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v1.0/groups/600000CVKP/admin/entitlements",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"groups",
										"600000CVKP",
										"admin",
										"entitlements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an admin entitlement",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v1.0/admin/entitlements/315aafee-5403-4653-af82-f5240ad491a4",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"admin",
										"entitlements",
										"315aafee-5403-4653-af82-f5240ad491a4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user/group to entitlement",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant\": {\n    \"groups\": [\n      {\n        \"brt\": false,\n        \"group\": \"600000CVKP\"\n      }\n    ],\n    \"rights\": [\n      {\n        \"values\": [\n          \"managecerts\",\n          \"readcerts\",\n          \"manageusergroups\",\n          \"readusergroups\"\n        ],\n        \"entitlement\": \"315aafee-5403-4653-af82-f5240ad491a4\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v1.0/admin/entitlements/315aafee-5403-4653-af82-f5240ad491a4",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"admin",
										"entitlements",
										"315aafee-5403-4653-af82-f5240ad491a4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an admin child's entitlement",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer Y88tSZtxUpLn1PVuEzvosnot9POkMCkdAcWYdlCE"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v1.0/admin/entitlements/315aafee-5403-4653-af82-f5240ad491a4/children ",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"admin",
										"entitlements",
										"315aafee-5403-4653-af82-f5240ad491a4",
										"children "
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Global Tuning Properties",
					"item": [
						{
							"name": "Get SAML federations SAML2.0  SP",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v1.0/saml/federations/saml20sp",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"saml",
										"federations",
										"saml20sp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update SAML federations SAML2.0  SP",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"messageValidTime\": 600,\n\t\"clockSkew\": 0,\n\t\"role\": \"sp\"\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v1.0/saml/federations/saml20sp",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"saml",
										"federations",
										"saml20sp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SAML federations SAML2.0 IdP",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{hostname}}/v1.0/saml/federations/saml20ip",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"saml",
										"federations",
										"saml20ip"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update SAML federations SAML2.0 IdP",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageValidTime\": 600,\n    \"assertionValidBefore\": 600,\n    \"assertionValidAfter\": 600,\n    \"role\": \"ip\"\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v1.0/saml/federations/saml20ip",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"saml",
										"federations",
										"saml20ip"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tenant Properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{hostname}}/gta/v1.0/tenant/properties",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"gta",
										"v1.0",
										"tenant",
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Allow transient and enrolled methods",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer kr4zs9OztBYBv8clDT21lXayMjez21y917xhKfXs",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Origin",
										"value": "https://statefarmpoc.ice.ibmcloud.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"key\": \"accessControlAllowOrigin\",\n        \"value\": \"\"\n    },\n    {\n        \"key\": \"inlineEnrollment\",\n        \"value\": \"true\"\n    },\n    {\n        \"key\": \"useCIEnrollmentsOnly\",\n        \"value\": \"false\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/gta/v1.0/tenant/properties",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"gta",
										"v1.0",
										"tenant",
										"properties"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}